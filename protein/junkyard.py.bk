def old_retrieve_references(self):
    print('*' * 20)
    print('CORE REFERENCE DATA IS MISSING')
    print('There are two options, you have never ever run this script before or the folder {0} is not corrent'.format(self.reference_folder))
    print('this is super experimental (i.e. I\'ve never bother')
    i = input('Continue y/[n] _')
    if not i or i in ('N', 'n'):
        print('Exiting...')
        exit()
    addresses = ('ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.xml.gz')
    for url in addresses:
        file = os.path.split(url)[1]
        if os.path.isfile(os.path.join(self.raw_folder, file)):
            continue
        else:
            req = requests.get(url)  # headers={"Accept": "application/xml"}
            if req.status_code != 200:
                raise ConnectionError('Could not retrieve data: ' + req.text)
            data = req.text
            open(file, 'w').write(data)
            if os.path.splitext(url) == 'gz':
                raise Exception('Okay. this will not work on windows... Can you unzip this file?? cd {0}; tar -x {1}; cd ../..'.format(self.reference_folder, file))
        raise NotImplementedError('Due to crappy windows 8 computer... this part is manual in VM: cat *.psi > cat.psi where psi files are from http://interactome.baderlab.org/data/')


class SwissProt:
    index = []
    info = {}
    folder = os.path.join(global_settings.reference_folder,'swissprot')

    @classmethod
    def data_fetch(cls, folder=None):
        if folder:
            cls.folder = folder
        raise NotImplementedError

    @classmethod
    def _load_index(cls):
        data=json.load(open(os.path.join(cls.folder, 'INDEX.json')))
        cls.info = data['info']
        cls.index = data['index']
        print(cls.index[0])

    def __init__(self, folder=None):
        if folder:
            self.folder = folder
        self._load_index()
        self.masterfile = os.path.join(self.folder, '9606_coords.tar.gz')
        self.make_map()

    def make_map(self):
        tar = tarfile.open(self.masterfile)
        l = tar.getnames()
        for name in l:
            if '5c67d8e1d60c599355e69302' in name:
                print(name)
        tar.close()
        # tar.extractall(global_settings.temp_folder)
        for model in self.index:
            pass
            #print(model)

    def __getitem__(self, item): #accession
        for model in self.index:
            if item == model['uniprot_ac']:
                file = 'SWISS-MODEL_Repository/{0}/{1}/{2}/swissmodel/2_233_4dnk.1.B_5c67d8e1d60c599355e69302.pdb'.format(model['uniprot_ac'][:2],model['uniprot_ac'][2:4] etc.)
                return {'x': model['from'],
                        'y': model['to'],
                        'id': model['coordinate_id'],
                        'description': '{template} ({seqid}%)'.format(**model),
                        'original': model}
